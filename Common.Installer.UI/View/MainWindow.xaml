<view:AnimatedWindow x:Class="Scar.Common.Installer.UI.View.MainWindow"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     xmlns:viewModel="clr-namespace:Scar.Common.Installer.UI.ViewModel"
                     xmlns:converters="clr-namespace:Scar.Common.WPF.Converters;assembly=Scar.Common.WPF.Converters"
                     xmlns:view="clr-namespace:Scar.Common.WPF.View;assembly=Scar.Common.WPF.View.AnimatedWindow"
                     SizeToContent="WidthAndHeight" Background="#FF464646" BorderBrush="Black" BorderThickness="2"
                     Foreground="#FFE0DFDF" Loaded="Window_Loaded" WindowStartupLocation="CenterScreen"
                     CustomShell="True" mc:Ignorable="d" d:DataContext="{d:DesignInstance viewModel:SetupViewModel}">
  <view:AnimatedWindow.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:ReverseBooleanConverter x:Key="ReverseBooleanConverter" />
    <Style TargetType="Button">
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Background" Value="#FF464646" />
      <Setter Property="Width" Value="90" />
      <Setter Property="Height" Value="30" />
      <Setter Property="Margin" Value="0" />
      <Setter Property="Foreground" Value="White" />
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="Button">
            <Border Name="border" Background="{TemplateBinding Background}" BorderBrush="DarkGray" BorderThickness="1">
              <Grid>
                <ContentPresenter Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" />
              </Grid>
            </Border>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
      <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter Property="Background" Value="#FF6E6E6E" />
        </Trigger>
        <Trigger Property="IsPressed" Value="True">
          <Setter Property="Background" Value="#FF1F1F1F" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="False">
          <Setter Property="Foreground" Value="Gray" />
        </Trigger>
      </Style.Triggers>
    </Style>
    <Style TargetType="TextBox">
      <Setter Property="VerticalContentAlignment" Value="Center" />
      <Setter Property="VerticalAlignment" Value="Center" />
      <Setter Property="Height" Value="30" />
      <Setter Property="Margin" Value="3" />
      <Setter Property="Foreground" Value="White" />
    </Style>
    <Style TargetType="TextBlock">
      <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style TargetType="Run">
      <Setter Property="BaselineAlignment" Value="Baseline" />
    </Style>
  </view:AnimatedWindow.Resources>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="40" />
      <RowDefinition Height="*" />
      <RowDefinition Height="53" />
    </Grid.RowDefinitions>

    <Rectangle Grid.RowSpan="99" Fill="#FF464646" MouseLeftButtonDown="Window_MouseLeftButtonDown" />
    <Rectangle Grid.Row="2" Fill="#FF292828" MouseLeftButtonDown="Window_MouseLeftButtonDown" />
    <DockPanel Grid.Row="0">
      <TextBlock VerticalAlignment="Top" Margin="10" MouseLeftButtonDown="Window_MouseLeftButtonDown"
                 Text="{Binding ProductStatus}" />

      <StackPanel VerticalAlignment="Top" Margin="5" HorizontalAlignment="Right" Orientation="Horizontal">
        <StackPanel.Resources>
          <Style TargetType="Button">
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Background" Value="#FF464646" />
            <Setter Property="Width" Value="15" />
            <Setter Property="Height" Value="15" />
            <Setter Property="Margin" Value="3" />
            <Setter Property="Foreground" Value="White" />
            <Setter Property="Template">
              <Setter.Value>
                <ControlTemplate TargetType="Button">
                  <Border Name="border" Background="{TemplateBinding Background}">
                    <Grid>
                      <ContentPresenter Name="content" />
                    </Grid>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                      <Setter TargetName="border" Property="BorderBrush" Value="White" />
                      <Setter TargetName="border" Property="BorderThickness" Value="1" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
            <Style.Triggers>
              <Trigger Property="IsMouseOver" Value="True" />
              <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#FF6E6E6E" />
              </Trigger>
            </Style.Triggers>
          </Style>
        </StackPanel.Resources>
        <Button Click="Minimize_Click">
          <Path Margin="3,8,3,0" Stretch="Uniform" Stroke="White" StrokeEndLineCap="Square" StrokeStartLineCap="Square"
                StrokeThickness="1.5">
            <Path.Data>
              <PathGeometry>
                <PathGeometry.Figures>
                  <PathFigure StartPoint="0,25">
                    <LineSegment Point="25,25" />
                  </PathFigure>
                </PathGeometry.Figures>
              </PathGeometry>
            </Path.Data>
          </Path>
        </Button>
        <Button Click="Close_Click">
          <Path Margin="3" Stretch="Uniform" Stroke="White" StrokeEndLineCap="Square" StrokeStartLineCap="Square"
                StrokeThickness="1.5">
            <Path.Data>
              <PathGeometry>
                <PathGeometry.Figures>
                  <PathFigure StartPoint="0,0">
                    <LineSegment Point="25,25" />
                  </PathFigure>
                  <PathFigure StartPoint="0,25">
                    <LineSegment Point="25,0" />
                  </PathFigure>
                </PathGeometry.Figures>
              </PathGeometry>
            </Path.Data>
          </Path>
        </Button>
      </StackPanel>
    </DockPanel>

    <StackPanel Margin="5" Grid.Row="1">

      <StackPanel Margin="0 10 0 0" Orientation="Horizontal">
        <Path Width="26" Height="26"
              Data="F1M-224.553,1265L-246.174,1283.52 -267.792,1302.04 -267.792,1265 -267.792,1227.97 -246.174,1246.49 -224.553,1265z"
              Fill="#FF8F8F8F" RenderTransformOrigin="0.5,0.5" Stretch="Uniform" />

        <TextBlock FontSize="20" Foreground="White">

          <Run Text="{Binding ProductName}" />
          <Run Text="{Binding ProductVersion}" FontSize="12" />
        </TextBlock>

      </StackPanel>

      <StackPanel Margin="0 10 0 0">
        <TextBlock Foreground="White">
          <Run Text="{Binding Year}" />
          <Run Text="{Binding CompanyName}" />
        </TextBlock>
        <TextBlock Foreground="White" Text="All Rights Reserved" />
      </StackPanel>

      <StackPanel IsEnabled="{Binding IsRunning, Converter={StaticResource ReverseBooleanConverter}}"
                  Visibility="{Binding InitialCanInstall, Converter={StaticResource BooleanToVisibilityConverter}}"
                  Margin="0 10 0 0" Orientation="Horizontal">
        <TextBlock Text="Install to: " />
        <TextBox Text="{Binding InstallPath, UpdateSourceTrigger=PropertyChanged}" Width="300"
                 IsEnabled="{Binding CanInstall}" Background="Transparent" />
        <Button Content="Browse" Command="{Binding BrowseInstallationPathCommand}" IsEnabled="{Binding CanInstall}" />
      </StackPanel>

      <DockPanel>
        <TextBlock Margin="0 10 0 0"
                   Visibility="{Binding Path=IsRunning, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}"
                   Text="{Binding ErrorStatus}">
          <TextBlock.Style>
            <Style TargetType="{x:Type TextBlock}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding ErrorStatus}" Value="Success">
                  <Setter Property="Foreground" Value="ForestGreen" />
                </DataTrigger>
              </Style.Triggers>
              <Style.Setters>
                <Setter Property="Foreground" Value="Crimson" />
              </Style.Setters>
            </Style>
          </TextBlock.Style>
        </TextBlock>

        <TextBlock Margin="0 10 0 0" HorizontalAlignment="Right" Cursor="Hand" FontWeight="Bold" Text="ShowLog"
                   TextDecorations="Underline">
          <TextBlock.Style>
            <Style TargetType="{x:Type TextBlock}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding NotStarted}" Value="True">
                  <Setter Property="Visibility" Value="Hidden" />
                </DataTrigger>
              </Style.Triggers>
              <Style.Setters>
                <Setter Property="Visibility" Value="Visible" />
              </Style.Setters>
            </Style>
          </TextBlock.Style>
          <TextBlock.InputBindings>
            <MouseBinding Command="{Binding ShowLogCommand}" MouseAction="LeftClick" />
          </TextBlock.InputBindings>
        </TextBlock>
      </DockPanel>

      <StackPanel Visibility="{Binding IsRunning, Converter={StaticResource BooleanToVisibilityConverter}}">
        <TextBlock Text="{Binding CurrentActionName}" />
        <ProgressBar Height="10" Maximum="{Binding ProgressTotal}"
                     Value="{Binding ProgressCurrentPosition, Mode=OneWay}" />
      </StackPanel>
    </StackPanel>

    <StackPanel Grid.Row="2" HorizontalAlignment="Center" Orientation="Horizontal">

      <StackPanel HorizontalAlignment="Center"
                  IsEnabled="{Binding Path=IsRunning, Converter={StaticResource ReverseBooleanConverter}}"
                  Orientation="Horizontal">
        <Button Command="{Binding InstallCommand}" CommandParameter="{Binding InstallPath}"
                IsEnabled="{Binding CanInstall}"
                Visibility="{Binding InitialCanInstall, Converter={StaticResource BooleanToVisibilityConverter}}">
          Install
        </Button>
        <Button Command="{Binding RepairCommand}" IsEnabled="{Binding CanRepair}"
                Visibility="{Binding InitialCanRepair, Converter={StaticResource BooleanToVisibilityConverter}}">
          Repair
        </Button>
        <Button Margin="10 0 0 0" Command="{Binding UninstallCommand}" IsEnabled="{Binding CanUnInstall}"
                Visibility="{Binding InitialCanUnInstall, Converter={StaticResource BooleanToVisibilityConverter}}">
          Uninstall
        </Button>
      </StackPanel>
      <Button IsCancel="True" Margin="10 0 0 0" Command="{Binding CancelCommand}">
        <Button.Style>
          <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsRunning}" Value="True">
                <Setter Property="Content" Value="Cancel" />
              </DataTrigger>
            </Style.Triggers>
            <Style.Setters>
              <Setter Property="Content" Value="Close" />
            </Style.Setters>
          </Style>
        </Button.Style>
      </Button>
    </StackPanel>
  </Grid>
</view:AnimatedWindow>
